openapi: 3.0.3
info:
  title: Event Planner - OpenAPI 3.0
  description: |-
    This is an application where a user will initiate the openion session for colleagues to join and choose their choice of restaurant within the session period and a random place will be finalized randomly from the options
  termsOfService: http://swagger.io/terms/
  contact:
    email: psk0911@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: https://localhost:8080/api/v1
tags:
  - name: event
    description: Create event and collect user responses for the event
paths:
  /event:
    post:
      tags:
        - event
      summary: Add a new event
      description: Add a new event
      operationId: addEvent
      requestBody:
        description: Create a new event
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEventResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Exception
    put:
      tags:
        - event
      summary: Update an existing event status
      description: Update the existing event status
      operationId: updateSession
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Status'    
      responses:
        '200':
          description: Successfully ended the session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Exception
  /event/{eventId}:        
    get:
      tags:
        - event
      summary: Fetches event details including responses of others
      description: User fetches the details of the event including responses of the other colleagues
      operationId: findEventById
      parameters:
        - name: eventId
          in: path
          description: Id of the event
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/EventResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        
        '500':
          description: Internal Server Exception  
    post:
      tags:
        - event
      summary: Submit user response to event
      description: Submit user response to event
      operationId: userChooseOption
      parameters:
        - name: eventId
          in: path
          description: ID of event
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: User response to event with option
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserResponse'
        required: true
      responses:
        '200':
          description: successfully submitted your response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '424':
          description: Failed Dependency
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Exception
components:
  schemas:
    CreateEventRequest:
      type: object
      properties:
        eventName:
          type: string
          description: event name
          example: lunch
        organizerName:
          type: string
          description: event organizer name
          example: John
        organizerEmail:
          type: string
          description: event organizer email
          example: John.doe@mail.com
    CreateEventResponse:
      type: object
      properties:
        eventId:
          type: integer
          format: int64
          example: 10
        eventSecret:
          type: integer
          format: int64
          example: 1012
        eventStatus:
          type: string
          description: session status
          enum:
            - NEW
            - ACTIVE
            - CLOSE
    ErrorResponse:
      type: object
      properties:
        MESSAGE:
          type: string
          description: Response status
          example: Bad Request
        DETAILS:
          type: string
          description: detailed response message
          example: Event name is mandatory || Event id is mandatory
    Status:
      type: object
      properties:
        eventId:
          type: integer
          format: int64
          example: 1012
        eventSecret:
          type: integer
          format: int64
          example: 1012
        status:
          type: string
          description: Status to be updated
          enum:
            - ACTIVE
            - CLOSE
    EventResponse:
      type: object
      properties:
        eventId:
          type: integer
          format: int64
          example: 10
        eventName:
          type: string
          description: event name
          example: lunch
        organizerName:
          type: string
          description: event organizer name
          example: John
        sessionStatus:
          type: string
          description: session status
          enum:
            - NEW
            - ACTIVE
            - CLOSE
        finalizedResponse:
          type: string
          description: finalized response if it is
          example: Best Restaurant
        responses:
          type: array
          items:
            type: object
            properties:
              userName:
                type: string
                example: James
              response:
                type: string
                example: best restaurant
    UserResponse:
      type: object
      properties:
        eventId:
          type: integer
          format: int64
          example: 10
        userName:
          type: string
          description: User name
          example: James
        userEmail:
          type: string
          description: User email
          example: James.Trey@mail.com
        response:
          type: string
          example: best restaurant
